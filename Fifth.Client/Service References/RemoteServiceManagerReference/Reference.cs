//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fifth.Client.RemoteServiceManagerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInfo", Namespace="http://schemas.datacontract.org/2004/07/Fifth.Server.Models")]
    [System.SerializableAttribute()]
    public partial class ServiceInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanStopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStop {
            get {
                return this.CanStopField;
            }
            set {
                if ((this.CanStopField.Equals(value) != true)) {
                    this.CanStopField = value;
                    this.RaisePropertyChanged("CanStop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteServiceManagerReference.IRemoteServiceManager")]
    public interface IRemoteServiceManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/ConnectionRequest", ReplyAction="http://tempuri.org/IRemoteServiceManager/ConnectionRequestResponse")]
        string ConnectionRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/ConnectionRequest", ReplyAction="http://tempuri.org/IRemoteServiceManager/ConnectionRequestResponse")]
        System.Threading.Tasks.Task<string> ConnectionRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/GetServices", ReplyAction="http://tempuri.org/IRemoteServiceManager/GetServicesResponse")]
        Fifth.Client.RemoteServiceManagerReference.ServiceInfo[] GetServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/GetServices", ReplyAction="http://tempuri.org/IRemoteServiceManager/GetServicesResponse")]
        System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo[]> GetServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/StartService", ReplyAction="http://tempuri.org/IRemoteServiceManager/StartServiceResponse")]
        Fifth.Client.RemoteServiceManagerReference.ServiceInfo StartService(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/StartService", ReplyAction="http://tempuri.org/IRemoteServiceManager/StartServiceResponse")]
        System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo> StartServiceAsync(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/StopService", ReplyAction="http://tempuri.org/IRemoteServiceManager/StopServiceResponse")]
        Fifth.Client.RemoteServiceManagerReference.ServiceInfo StopService(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteServiceManager/StopService", ReplyAction="http://tempuri.org/IRemoteServiceManager/StopServiceResponse")]
        System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo> StopServiceAsync(string serviceName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteServiceManagerChannel : Fifth.Client.RemoteServiceManagerReference.IRemoteServiceManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteServiceManagerClient : System.ServiceModel.ClientBase<Fifth.Client.RemoteServiceManagerReference.IRemoteServiceManager>, Fifth.Client.RemoteServiceManagerReference.IRemoteServiceManager {
        
        public RemoteServiceManagerClient() {
        }
        
        public RemoteServiceManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteServiceManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ConnectionRequest() {
            return base.Channel.ConnectionRequest();
        }
        
        public System.Threading.Tasks.Task<string> ConnectionRequestAsync() {
            return base.Channel.ConnectionRequestAsync();
        }
        
        public Fifth.Client.RemoteServiceManagerReference.ServiceInfo[] GetServices() {
            return base.Channel.GetServices();
        }
        
        public System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo[]> GetServicesAsync() {
            return base.Channel.GetServicesAsync();
        }
        
        public Fifth.Client.RemoteServiceManagerReference.ServiceInfo StartService(string serviceName) {
            return base.Channel.StartService(serviceName);
        }
        
        public System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo> StartServiceAsync(string serviceName) {
            return base.Channel.StartServiceAsync(serviceName);
        }
        
        public Fifth.Client.RemoteServiceManagerReference.ServiceInfo StopService(string serviceName) {
            return base.Channel.StopService(serviceName);
        }
        
        public System.Threading.Tasks.Task<Fifth.Client.RemoteServiceManagerReference.ServiceInfo> StopServiceAsync(string serviceName) {
            return base.Channel.StopServiceAsync(serviceName);
        }
    }
}
